from wurst import searching as ws
from wurst import transformations as wt
from .utils import *
from .geomap import Geomap

class Fuels:
    """
        Class that modifies fuel inventories and markets in ecoinvent based on IAM output data.

        :ivar scenario: name of an IAM pathway
        :vartype pathway: str

    """

    def __init__(self, db, original_db, iam_data, model, pathway, year):
        self.db = db
        self.original_db = original_db
        self.iam_data = iam_data
        self.model = model
        self.geo = Geomap(model=model)
        self.scenario = pathway
        self.year = year
        self.fuels_lhv = get_lower_heating_values()
        self.list_iam_regions = [
            c[1]
            for c in self.geo.geo.keys()
            if type(c) == tuple and c[0].lower() == self.model
        ]

    def get_compression_effort(self, p_in, p_out, flow_rate):
        """ Calculate the required electricity consumption from teh compressor given
        an inlet and outlet pressure and a flow rate for hydrogen. """
        # result is shaft power [kW] and compressor size [kW]
        # flow_rate = mass flow rate (kg/day)
        # p_in =  input pressure (bar)
        # p_out =  output pressure (bar)
        Z_factor = 1.03198  # the hydrogen compressibility factor
        N_stages = 2  # the number of compressor stages (assumed to be 2 for this work)
        t_inlet = 310.95  # K the inlet temperature of the compressor
        y_ratio = 1.4  # the ratio of specific heats
        M_h2 = 2.15  # g/mol the molecular mass of hydrogen
        eff_comp = 0.75  # %
        R_constant = 8.314  # J/(mol*K)
        part_1 = (flow_rate * (1 / (24 * 3600))) * ((Z_factor * t_inlet * R_constant) / (M_h2 * eff_comp)) * (
        (N_stages * y_ratio / (y_ratio - 1)))
        part_2 = ((p_out / p_in) ** ((y_ratio - 1) / (N_stages * y_ratio))) - 1
        power_req = part_1 * part_2
        motor_eff = 0.95
        oversizing = 1.1
        size_compressor = (power_req / motor_eff) * oversizing
        return power_req * 24 / flow_rate

    def generate_DAC_activities(self):

        """ Generate regional variants of the DAC process with varying heat sources """

        # define heat sources
        heat_map_ds = {
            "waste heat": (
            "heat, from municipal waste incineration to generic market for heat district or industrial, other than natural gas",
            "heat, district or industrial, other than natural gas"),
            "industrial steam heat": ("market for heat, from steam, in chemical industry",
                                      "heat, from steam, in chemical industry"),
            "heat pump heat": ("market group for electricity, low voltage", "electricity, low voltage")
        }

        # loop through IAM regions
        for region in self.list_iam_regions:
            for heat in heat_map_ds:

                ds = wt.copy_to_new_location(ws.get_one(
                    self.original_db,
                    ws.contains("name", "carbon dioxide, captured from atmosphere")
                ), region)

                new_name = ds["name"] + ", with " + heat + ", and grid electricity"

                ds["name"] = new_name
                for exc in ws.production(ds):
                    exc["name"] = new_name

                for exc in ws.technosphere(ds):
                    if "heat" in exc["name"]:
                        exc["name"] = heat_map_ds[heat][0]
                        exc["product"] = heat_map_ds[heat][1]
                        exc["location"] = "RoW"

                        if heat == "heat pump heat":
                            exc["unit"] = "kilowatt hour"
                            exc["amount"] *= 1 / (2.9 * 3.6)  # COP of 2.9 and MJ --> kWh
                            exc["location"] = "RER"

                            ds["comment"] = "Dataset generated by `premise`, initially based on Terlouw et al. 2021. "
                            ds["comment"] += (
                                        "A CoP of 2.9 is assumed for the heat pump. But the heat pump itself is not"
                                        + " considered here. ")

                ds["comment"] += ("The CO2 is compressed from 1 bar to 25 bar, "
                                  + " for which 0.78 kWh is considered. Furthermore, there's a 2.1% loss on site"
                                  + " and only a 1 km long pipeline transport.")

                if "input" in ds:
                    ds.pop("input")

                ds = relink_technosphere_exchanges(
                    ds, self.db, self.model, contained=False
                )

                self.db.append(ds)

    def generate_hydrogen_activities(self):
        """

        Defines regional variants for hydrogen production, but also different supply
        chain designs:
        * by truck (100, 200, 500 and 1000 km), gaseous, liquid and LOHC
        * by reassigned CNG pipeline (100, 200, 500 and 1000 km), gaseous, with and without inhibitors
        * by dedicated H2 pipeline (100, 200, 500 and 1000 km), gaseous
        * by ship, liquid (1000, 2000, 5000 km)

        For truck and pipeline supply chains, we assume a transmission and a distribution part, for which
        we have specific pipeline designs. We also assume a means for regional storage in between (salt cavern).
        We apply distance-based losses along the way.

        Most of these supply chain design options are based on the work:
        * Wulf C, Reuß M, Grube T, Zapp P, Robinius M, Hake JF, et al.
          Life Cycle Assessment of hydrogen transport and distribution options.
          J Clean Prod 2018;199:431–43. https://doi.org/10.1016/j.jclepro.2018.07.180.
        * Hank C, Sternberg A, Köppel N, Holst M, Smolinka T, Schaadt A, et al.
          Energy efficiency and economic assessment of imported energy carriers based on renewable electricity.
          Sustain Energy Fuels 2020;4:2256–73. https://doi.org/10.1039/d0se00067a.
        * Petitpas G. Boil-off losses along the LH2 pathway. US Dep Energy Off Sci Tech Inf 2018.

        We also assume efficiency gains over time for the PEM electrolysis process: from 58 kWh/kg H2 in 2010,
        down to 44 kWh by 2050, according to a literature review conducted by the Paul Scherrer Institut.

        """

        means_of_transport = {
            "truck": {
                "type": [("market for transport, freight, lorry >32 metric ton, EURO6",
                          "transport, freight, lorry >32 metric ton, EURO6")],
                "state": ["gaseous", "liquid"],
                "distance": [100, 200, 500, 1000]
                },
            "ship": {
                "type": [("transport, freight, sea, tanker for liquefied natural gas",
                          "transport, freight, sea, tanker for liquefied natural gas")],
                "state": ["liquid"],
                "distance": [1000, 2000, 5000]
                },
            "pipeline": {
                "type": [
                    (
                        ("distribution pipeline for hydrogen, dedicated hydrogen pipeline", "pipeline, for hydrogen distribution"),
                        ("transmission pipeline for hydrogen, dedicated hydrogen pipeline", "pipeline, for hydrogen transmission")
                     ),
                    (
                        ("distribution pipeline for hydrogen, reassigned CNG pipeline", "pipeline, for hydrogen distribution"),
                        ("transmission pipeline for hydrogen, reassigned CNG pipeline", "pipeline, for hydrogen transmission")
                    )
                    ],
                "state": ["gaseous"],
                "distance": [100, 200, 500, 1000],
                "regional storage": ("geological hydrogen storage", "hydrogen storage"),
                "loss": {"pipeline": 4e-5, # lost per kg H2/km,
                         "compression": 0.005, # kg H2/compression event
                         }
                }
        }



        fuel_activities = {
            "hydrogen": ["hydrogen production, gaseous, 25 bar, from electrolysis",
                         "hydrogen production, steam methane reforming, from biomethane, high and low temperature, with CCS (MDEA, 98% eff.), 26 bar",
                         "hydrogen production, steam methane reforming, from biomethane, high and low temperature, 26 bar",
                         "hydrogen production, auto-thermal reforming, from biomethane, 25 bar",
                         "hydrogen production, auto-thermal reforming, from biomethane, with CCS (MDEA, 98% eff.), 25 bar",
                         "hydrogen production, steam methane reforming of natural gas, 25 bar",
                         "hydrogen production, steam methane reforming of natural gas, with CCS (MDEA, 98% eff.), 25 bar",
                         "hydrogen production, auto-thermal reforming of natural gas, 25 bar",
                         "hydrogen production, auto-thermal reforming of natural gas, with CCS (MDEA, 98% eff.), 25 bar",
                         "hydrogen production, gaseous, 25 bar, from heatpipe reformer gasification of woody biomass with CCS, at gasification plant",
                         "hydrogen production, gaseous, 25 bar, from heatpipe reformer gasification of woody biomass, at gasification plant",
                         "hydrogen production, gaseous, 25 bar, from gasification of woody biomass in entrained flow gasifier, with CCS, at gasification plant",
                         "hydrogen production, gaseous, 25 bar, from gasification of woody biomass in entrained flow gasifier, at gasification plant",
                         "hydrogen production, gaseous, 30 bar, from hard coal gasification and reforming, at coal gasification plant"
                         ]
        }

        for region in self.list_iam_regions:

            for fuel in fuel_activities:
                for f in fuel_activities[fuel]:

                    ds = wt.copy_to_new_location(ws.get_one(
                        self.original_db,
                        ws.contains("name", f)
                    ), region)

                    if "input" in ds:
                        ds.pop("input")

                    ds = relink_technosphere_exchanges(
                        ds, self.db, self.model
                    )

                    self.db.append(ds)

    def generate_regional_variants(self):
        """ Duplicate fuel chains and make them IAM region-specific """

        # start with DAC datasets
        print("Generate region-specific direct air capture processes.")
        self.generate_DAC_activities()

        # then hydrogen
        print("Generate region-specific hydrogen production and supply chains.")
        self.generate_hydrogen_activities()


        fuel_activities = {
            "hydrogen": ["hydrogen production, gaseous, 25 bar, from electrolysis",
                         "hydrogen production, steam methane reforming, from biomethane, high and low temperature, with CCS (MDEA, 98% eff.), 26 bar",
                         "hydrogen production, steam methane reforming, from biomethane, high and low temperature, 26 bar",
                         "hydrogen production, auto-thermal reforming, from biomethane, 25 bar",
                         "hydrogen production, auto-thermal reforming, from biomethane, with CCS (MDEA, 98% eff.), 25 bar",
                         "hydrogen production, steam methane reforming of natural gas, 25 bar",
                         "hydrogen production, steam methane reforming of natural gas, with CCS (MDEA, 98% eff.), 25 bar",
                         "hydrogen production, auto-thermal reforming of natural gas, 25 bar",
                         "hydrogen production, auto-thermal reforming of natural gas, with CCS (MDEA, 98% eff.), 25 bar",
                         "hydrogen production, gaseous, 25 bar, from heatpipe reformer gasification of woody biomass with CCS, at gasification plant",
                         "hydrogen production, gaseous, 25 bar, from heatpipe reformer gasification of woody biomass, at gasification plant",
                         "hydrogen production, gaseous, 25 bar, from gasification of woody biomass in entrained flow gasifier, with CCS, at gasification plant",
                         "hydrogen production, gaseous, 25 bar, from gasification of woody biomass in entrained flow gasifier, at gasification plant",
                         "hydrogen production, gaseous, 30 bar, from hard coal gasification and reforming, at coal gasification plant"
                         ],
            "methane, from biomass": [
                'production of 2 wt-% potassium',
                'biogas upgrading - sewage sludge',
                'Biomethane, gaseous',
            ],
            #"methane, synthetic, from coal": [],
            #"methane, synthetic, from electrolysis": []
        }

        for region in self.list_iam_regions:
            for fuel in fuel_activities:
                for f in fuel_activities[fuel]:

                    ds = wt.copy_to_new_location(ws.get_one(
                        self.original_db,
                        ws.contains("name", f)
                    ), region)

                    if "input" in ds:
                        ds.pop("input")

                    ds = relink_technosphere_exchanges(
                        ds, self.db, self.model
                    )

                    self.db.append(ds)

        return self.db