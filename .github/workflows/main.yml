name: Github Action
on: [push, pull_request]

jobs:
  clean:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Black formatting
        uses: lgeiger/black-action@v1.0.1
        with:
          args: "./"

      - name: Run isort
        uses: jamescurtin/isort-action@master
        with:
          configuration: --profile black

      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)

      - name: Push changes
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.email "r_s@me.com"
          git config --global user.name "romainsacchi"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am "Black reformating"
          git push

  lint:
    runs-on: ubuntu-latest
    needs: clean
    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: master
          IGNORE_GITIGNORED_FILES: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}

  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]

    needs: clean

    steps:
      - uses: actions/checkout@v2

      - name: Install python version
        uses: gabrielfalcao/pyenv-action@v7
        with:
          default: 3.8.6
          command: pip install -U pip  # upgrade pip after installing python

      - name: create environment
        run: pyenv local 3.8.6 && python -mvenv .venv386

      - name: Install dependencies
        run: |
          pip install -r requirements.txt --upgrade pip
          pip install -e .
          pip install pytest
          pip install coveralls

      - name: Run tests
        run: |
          pytest -m "not ecoinvent" -s --cov=premise
          coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.COVERALLS }}
          IAM_FILES_KEY: ${{ secrets.IAM_FILES_KEY }}

  publish:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Publish distribution ðŸ“¦ to Anaconda if Push
        run: |
          conda install conda-build anaconda-client
          conda config --set always_yes yes --set changeps1 no;
          conda config --append channels conda-forge;
          conda config --append channels cmutel;
          conda config --append channels konstantinstadler;
          conda config --append channels haasad;
          conda config --append channels pascallesage;
          conda config --append channels romainsacchi;
          conda update conda;
          conda config --set channel_priority strict;
          conda info -a;
          conda config --set anaconda_upload no
          conda build . --output
          PKG_NAME=premise
          export CONDA_BLD_PATH=~/conda-bld
          export VERSION=`date +%Y.%m.%d`
          conda build . --old-build-string
          ls $CONDA_BLD_PATH/noarch/
          anaconda -t ${{ secrets.ANACONDA_CLOUD }} upload -u ${{ secrets.CONDA_USERNAME }} $CONDA_BLD_PATH/noarch/$PKG_NAME-$VERSION-py_0.tar.bz2 --force

      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user

      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .

      - name: Publish distribution ðŸ“¦ to Test PyPI if Push
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.TEST_PYPI_USER }}
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI if Release
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.PYPI_USER }}
          password: ${{ secrets.PYPI_PASSWORD }}
